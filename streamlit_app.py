import streamlit as st
import streamlit as st
import pickle
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import torch
from diffusers import StableDiffusionPipeline
import cv2
import os
from transformers import AutoTokenizer
from transformers import set_seed
import tqdm
import accelerate
from pathlib import Path
import PIL
import requests
from diffusers import StableDiffusionInstructPix2PixPipeline, EulerAncestralDiscreteScheduler
loaded_model=pickle.load(open('model.pkl','rb'))
st.title('TEXT TO IMAGE GENERATION:blue[ GAN]')
# user input for the size the user wants
length=st.text_input('enter the length of the image')
breadth=st.text_input('enter the breadth of the image')
prompts=st.text_input('ENTER THE PROMPT FOR YOUR IMAGE')
l.append(length)
l.append(breadth)
image_size=tuple(l)
# settings for the image generated by the GAN model
class ganSettings:
  image_size=image_size
  num_inference_steps=10
  image_gen_steps=30
  seed=42
  batch_size=256
  num_images=1
  guidance_scale=9.5
model_id='stabilityai/stable-diffusion-2-1'

# function for generating the image
def generate_image(model,prompt,output_dir='generated_images'):
  generator=torch.Generator('cuda').manual_seed(ganSettings.seed)
  image=pipe(prompt,num_inference_steps=ganSettings.image_gen_steps,generator=generator,guidance_scale=ganSettings.guidance_scale).images[0]
  image=image.resize(ganSettings.image_size)
  # creating the output directory for the image
  os.makedirs(output_dir,exist_ok=True)
  image_path=os.path.join(output_dir,f'{prompt}.png')
  l.append(image_path)
  print(f'image saved at {image_path}')
  image.save(image_path) # image is getting saved
# function for updating the image
def update_image(model2,prompt,output_dir='generated_images'):
  generator=torch.Generator('cuda').manual_seed(ganSettings.seed)
  image=cv2.imread(l[-1])
  image=model2(prompt,image,num_inference_steps=ganSettings.image_gen_steps,generator=generator,guidance_scale=ganSettings.guidance_scale).images[0]
  image=image.resize(ganSettings.image_size)
  return image
if st.button('GENERATE'):
  image=generate_image(loaded_model,prompts,output_dir='generated_images')
  st.image(image,caption='generated image')
